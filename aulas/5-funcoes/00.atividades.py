# -*- coding: utf-8 -*-
"""5_Funcoes.ipynb

Automatically generated by Colaboratory.


www.eia.ai

# Funções
"""

def func():
  num = 10
  print("Uma função %d " % (num))

func()
func()

def func():
  pass
func()

def print_var(numero):
  print(numero)

print_var(2)
print("Maça")

def print_soma(num1,num2):
  print(num1 + num2)

print_soma(1,2)
print_soma(3.3, 1.1)
print_soma("olá ", " mundo!")

def func(*args):
  print(type(args))
  print("Argumentos são: ", args)

func(1,2,3)
func()
func("Olá", True, [1,2,3])

def print_sub(num1,num2):
  print(num1 - num2)
print_sub(num2= 2, num1 = 10)

def func(*args, outro):
  print("Argumentos são: ", args)
  print(outro)

func(1,2,3, outro="1")
func(outro="2")
func("olá",True, [1,2,3], outro='3')

def func(valor, nome = "Teste"):
  print(nome, valor)

func(3)
func(3,"Outro")

def func(**args):
  print(type(args))
  print(args)
  print(args['Valor'])

func(Valor = '10', operacao = 'Soma', resultado = 10)

def printa(x):
  print(x)

def executa_func(func,x):
  func(x)

minha_funcao = printa
print(type(minha_funcao))

executa_func(minha_funcao,10)

def subtrai(num1,num2):
  valor = num1 - num2
  return valor

subtracao = subtrai(10,3)

print(subtracao)

def len_int(numero):
  numero_em_texto = str(numero)
  return len(numero_em_texto)

num1 = "10"
num2 = 1230

tamanho1 = len_int(num1)
tamanho2 = len_int(num2)

print("O número %s tem %d dígitos" % (num1,tamanho1))
print("O número %d tem %d dígitos" % (num2,tamanho2))

def retorna_multiplo():
  return 1,2

valor = retorna_multiplo()
print(valor)
print(type(valor))

def retorna_multiplo(a,b,c):
  a += a
  b += b
  c += c
  return a,b,c

x,y,z = retorna_multiplo(1,2,3)
print(x,y,z)
a = retorna_multiplo(1,2,3)
print(a)

def func(x):
  if x == "Olá":
    print("Olá")
    return
  print("123")
  return x

print(func("x"))

faz_soma = lambda x : x + 10
valor = faz_soma(2)
print(valor)

multiplica = lambda x,y : x * y
valor = multiplica(2,10)
print(valor)

def multiplica(y):
  return lambda x : x * y

valor = multiplica(2)

resultado = valor(10)

print(resultado)

def print_num(num):
  print(num)
  if num >=10:
    return
  print_num(num + 1)

print_num(0)

def print_str(texto, indice):
  if indice == len(texto):
    return
  print(texto[indice])
  print_str(texto, indice + 1)

print_str("Python",0)

def fatorial(num):
  if(num == 1):
    return 1
  return num * fatorial(num-1)

print(fatorial(10))

def pai():
  def filho():
    print("sou filho")
  filho()
pai()

def calculadora(num1,num2, op):
  def soma(a,b):
    return a + b
  def subtrai(a,b):
    return a - b
  if (op=='+'):
    return soma(num1,num2)
  elif (op=='-'):
    return subtrai(num1,num2)

print(calculadora(2,1,"-"))
print(calculadora(2,1,"+"))

def pega_func_print():
  def print_var(var):
    print(var)
  return print_var

print_me = pega_func_print()

print_me(10)
print(type(print_me))

def DeixaMaisculo(func):
  def inner_func():
    return func().upper()
  return inner_func

@DeixaMaisculo
def retorna_string():
  return "string de teste"

valor = retorna_string()
print(valor)

def DeixaMaisculo(func):
  def inner_func(str1,str2):
    return func(str1,str2).upper()
  return inner_func

@DeixaMaisculo
def concatena_strings(str1,str2):
  return str1 + str2

valor = concatena_strings("teste","abc")
print(valor)

def DeixaMaisculo(func):
  def inner_func(texto):
    return func(texto).upper()
  return inner_func

def InsereParenteses(func):
  def inner_func(texto):
    return '(' + func(texto) + ')'
  return inner_func

@DeixaMaisculo
@InsereParenteses
def formata_string(texto):
  return texto

print(formata_string("Olá este texto sera formatado!"))

# 1 - Crie uma função chamada “e_negativo” que receba um número,  
# retorna um booleano “True” se o número for negativo, 
# caso contrário retorna “False”.

def e_negativo(num):
  return num < 0

print(e_negativo(2))
print(e_negativo(-2))

# 2 - Crie um função que receba um array de números (int ou float) 
# e retorne sua soma.

def soma_array(arr):
  soma = 0
  for i in arr:
    soma += i
  return soma

print(soma_array([10,50,40]))

# 3 - Crie um função que receba uma string e que conte e retorne o número 
# de vogais desta string.

def conta_vogais(texto):
  vogais = 0
  arr_vogais = ('a','e','i','o','u')
  for i in texto:
    if i in arr_vogais:
      vogais +=1
  return vogais

print(conta_vogais("alterações"))

# 4 - Crie um função que retorne o último caractere de um string recebida.

def pega_ultimo(texto):
  return texto[len(texto)-1]

print(pega_ultimo("Python"))

# 5 - Crie um função que receba dois números e uma string dizendo se deve 
# realizar a soma ou subtração do números.

def calcula(num1,num2, op):
  if (op=="+"):
    return num1+num2
  else:
    return num1 - num2

print(calcula(5,1,"-"))

# 6 - Crie um função que receba uma lista de elementos e um valor qualquer. 
# Em seguida retorne um booleano dizendo se o valor foi encontrado 
# ou não na lista.

def encontra(array, item):
  for i in array:
    if (i == item):
      return True
  return False

arr = [1,'3', True, 'Olá', 7.1]
print(encontra(arr,"abc"))
print(encontra(arr,"Olá"))
print(encontra(arr,"3"))
print(encontra(arr,False))
print(encontra(arr,True))

# 7 - Crie um função que receba uma lista de elementos e um valor qualquer.  
# Em seguida retorne um booleano dizendo se o valor foi encontrado ou não 
# e também a posição onde foi encontrado.

def encontra_indice(array, item):
  for i in range(0,len(array)):
    if (array[i] == item):
      return True, i+1
  return False, -1  

arr = [10,'3', True, 'Olá', 7.1]
print(encontra_indice(arr,"abc"))
print(encontra_indice(arr,"Olá"))
print(encontra_indice(arr,"3"))
print(encontra_indice(arr,False))
print(encontra_indice(arr,True))

# 8 - Crie uma função que recebe um número arbitrário de parâmetros. 
# Em seguida diga qual o tipo de cada parâmetro

def mostra_tipo(*args):
  for i in args:
    print(type(i))

mostra_tipo(1,2,3.4,"texto", True)

# 9 - Crie uma função que receba um string, mas que possua um decorator para 
# transforma-la em uma citação, ou seja você deve retornar strings entre 
# aspas duplas, além disso transforme todos os caracteres para minúscula 
# usando a função lower().

def citacao(func):
  def func_inner(str):
    return '"' + func(str).lower() + '"'
  return func_inner

@citacao
def tranforma(str):
  return str

print("E disse joão: ", tranforma("Só os sábios sabem!"))

# 10 - Cria uma função recursiva que itere os números de 0 até 10 e printe o 
# resultado de sua divisão inteira com o número três.

def printa_div_3(num):
  if num ==11:
    return
  print(num // 3)
  printa_div_3(num+1)

printa_div_3(0)

"""# Escopo"""

var2 = 10
def func():
  print(var2)
  variavel_local =10

func()

var2 = 10

if (True):
  var2 = 20

print(var2)

var2 = 10

def func():
  var2 = 20
  print(var2)

func()
print(var2)

var2 = 10

def func():
  global var2 
  var2 = 20

func()
print(var2)

def func_pai():
  pai = 10
  def func_filho():
    print(pai)
  func_filho();

func_pai()

def func_pai():
  pai = 10
  def func_filho():
    pai = 20
    print(pai)
  func_filho();
  print(pai)

func_pai()

def func_pai():
  pai = 10
  def func_filho():
    nonlocal pai 
    pai = 20
    print(pai)
  func_filho();
  print(pai)

func_pai()

var = 20
print(var)
del var
print(var)

array = [1,2,3]
del array[0]
print(array)

array = [1,2,3]
del array[:2]
print(array)

